
open System.IO

let m =
    array2D
        [|
            [1.0; 1.0; 1.0; 1.0; 1.0; 0.5; 1.0; 0.0; 0.5; 1.0; 1.0; 1.0; 1.0; 1.0; 1.0; 1.0; 1.0; 1.0]
            [2.0; 1.0; 0.5; 0.5; 1.0; 2.0; 0.5; 0.0; 2.0; 1.0; 1.0; 1.0; 1.0; 0.5; 2.0; 1.0; 2.0; 0.5]
            [1.0; 2.0; 1.0; 1.0; 1.0; 0.5; 2.0; 1.0; 0.5; 1.0; 1.0; 2.0; 0.5; 1.0; 1.0; 1.0; 1.0; 1.0]
            [1.0; 1.0; 1.0; 0.5; 0.5; 0.5; 1.0; 0.5; 0.0; 1.0; 1.0; 2.0; 1.0; 1.0; 1.0; 1.0; 1.0; 2.0]
            [1.0; 1.0; 0.0; 2.0; 1.0; 2.0; 0.5; 1.0; 2.0; 2.0; 1.0; 0.5; 2.0; 1.0; 1.0; 1.0; 1.0; 1.0]
            [1.0; 0.5; 2.0; 1.0; 0.5; 1.0; 2.0; 1.0; 0.5; 2.0; 1.0; 1.0; 1.0; 1.0; 2.0; 1.0; 1.0; 1.0]
            [1.0; 0.5; 0.5; 0.5; 1.0; 1.0; 1.0; 0.5; 0.5; 0.5; 1.0; 2.0; 1.0; 2.0; 1.0; 1.0; 2.0; 0.5]
            [0.0; 1.0; 1.0; 1.0; 1.0; 1.0; 1.0; 2.0; 1.0; 1.0; 1.0; 1.0; 1.0; 2.0; 1.0; 1.0; 0.5; 1.0]
            [1.0; 1.0; 1.0; 1.0; 1.0; 2.0; 1.0; 1.0; 0.5; 0.5; 0.5; 1.0; 0.5; 1.0; 2.0; 1.0; 1.0; 2.0]
            [1.0; 1.0; 1.0; 1.0; 1.0; 0.5; 2.0; 1.0; 2.0; 0.5; 0.5; 2.0; 1.0; 1.0; 2.0; 0.5; 1.0; 1.0]
            [1.0; 1.0; 1.0; 1.0; 2.0; 2.0; 1.0; 1.0; 1.0; 2.0; 0.5; 0.5; 1.0; 1.0; 1.0; 0.5; 1.0; 1.0]
            [1.0; 1.0; 0.5; 0.5; 2.0; 2.0; 0.5; 1.0; 0.5; 0.5; 2.0; 0.5; 1.0; 1.0; 1.0; 0.5; 1.0; 1.0]
            [1.0; 1.0; 2.0; 1.0; 0.0; 1.0; 1.0; 1.0; 1.0; 1.0; 2.0; 0.5; 0.5; 1.0; 1.0; 0.5; 1.0; 1.0]
            [1.0; 2.0; 1.0; 2.0; 1.0; 1.0; 1.0; 1.0; 0.5; 1.0; 1.0; 1.0; 1.0; 0.5; 1.0; 1.0; 0.0; 1.0]
            [1.0; 1.0; 2.0; 1.0; 2.0; 1.0; 1.0; 1.0; 0.5; 0.5; 0.5; 2.0; 1.0; 1.0; 0.5; 2.0; 1.0; 1.0]
            [1.0; 1.0; 1.0; 1.0; 1.0; 1.0; 1.0; 1.0; 0.5; 1.0; 1.0; 1.0; 1.0; 1.0; 1.0; 2.0; 1.0; 0.0]
            [1.0; 0.5; 1.0; 1.0; 1.0; 1.0; 1.0; 2.0; 1.0; 1.0; 1.0; 1.0; 1.0; 2.0; 1.0; 1.0; 0.5; 0.5]
            [1.0; 2.0; 1.0; 0.5; 1.0; 1.0; 1.0; 1.0; 0.5; 0.5; 1.0; 1.0; 1.0; 1.0; 1.0; 2.0; 2.0; 1.0]

        |]

let generateInsertString typeA typeB multiplier = 
    let r = sprintf "INSERT INTO [dbo].Relationships(TypeA, TypeB, Multiplier) VALUES(%d, %d, %A)\n" typeA typeB multiplier
    r

let k = m.GetLength(1) - 1

let li = []
for i = 0 to k do
    for j = 0 to k do
        let s = (i+1, j+1, m.[i,j]) |||> generateInsertString
        File.AppendAllText("C:\\Users\\c16\\Documents\\pokemon.txt", s) 

//let res = String.concat "\n" li
//printfn "%A" res

//let ret = System.Text.Encoding.ASCII.GetBytes res
//File.WriteAllBytes("C:\\Users\\c16\\Documents\\pokemon.txt", ret) 